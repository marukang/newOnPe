apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.google.gms.google-services'

android {
    signingConfigs {
        debug {
            // storeFile file('C:\\workSpace\\newOnPe\\keystore\\OnPe_Bundle_Key.jks')
            storeFile file('/Users/woozie/Desktop/complexion[OnPe]/Android/newOnPe/keystore/OnPe_Bundle_Key.jks')
            storePassword 'onpe1234'
            keyAlias 'OnPe_Bundle_key'
            keyPassword 'onpe1234'
        }
    }
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.funidea.newonpeproject"
        minSdkVersion 26
        targetSdkVersion 30
        versionCode 49
        versionName "1.39"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
        signingConfig signingConfigs.debug
    }



    buildTypes {
        release {
            //shrinkResources true
            minifyEnabled true
            signingConfig signingConfigs.debug
            //proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        checkReleaseBuilds false
    }

    splits {

        // Configures multiple APKs based on ABI.
        abi {

            // Enables building multiple APKs per ABI.
            enable true

            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86 and x86_64.

            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()

            // Specifies a list of ABIs that Gradle should create APKs for.
            include "x86", "armeabi-v7a", "arm64-v8a", "x86_64"

            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
            universalApk false
        }
    }

}


ext.abiCodes = ['armeabi-v7a':1, "arm64-v8a" :2, x86:3, x86_64:4]
import com.android.build.OutputFile
android.applicationVariants.all { variant ->

    // Assigns a different version code for each output APK
    // other than the universal APK.
    variant.outputs.each { output ->

        // Stores the value of ext.abiCodes that is associated with the ABI for this variant.
        def baseAbiVersionCode =
                // Determines the ABI for this variant and returns the mapped value.
                project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))

        // Because abiCodes.get() returns null for ABIs that are not mapped by ext.abiCodes,
        // the following code does not override the version code for universal APKs.
        // However, because we want universal APKs to have the lowest version code,
        // this outcome is desirable.
        if (baseAbiVersionCode != null) {

            // Assigns the new version code to versionCodeOverride, which changes the version code
            // for only the output APK, not for the variant itself. Skipping this step simply
            // causes Gradle to use the value of variant.versionCode for the APK.
            output.versionCodeOverride =
                    baseAbiVersionCode * 1000 + variant.versionCode
        }
    }
}

repositories {
    // Depending on AndroidX Snapshot Builds to get the latest CameraX libs.
    maven { url 'https://androidx.dev/snapshots/builds/6787662/artifacts/repository/' }
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    maven { url 'https://jitpack.io' }
    mavenCentral()
}


dependencies {

    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'com.github.israel-fl:bitmap2video:2.0.0' //동영상 녹화
    // -------------------------------------------------------
    implementation 'com.google.mlkit:pose-detection:17.0.1-beta1' // If you want to use the base sdk
    implementation 'com.google.mlkit:pose-detection-accurate:17.0.1-beta1'
    // -------------------------------------------------------
    // CameraX
    implementation "androidx.camera:camera-camera2:1.0.0-SNAPSHOT"
    implementation "androidx.camera:camera-lifecycle:1.0.0-SNAPSHOT"
    implementation "androidx.camera:camera-view:1.0.0-SNAPSHOT"
    // -------------------------------------------------------
    implementation "com.kakao.sdk:v2-user:2.5.2" // 카카오 로그인
    implementation "com.kakao.sdk:v2-talk:2.5.2" // 친구, 메시지(카카오톡)
    implementation "com.kakao.sdk:v2-story:2.5.2" // 카카오스토리
    implementation "com.kakao.sdk:v2-link:2.5.2" // 메시지(카카오링크)
    implementation "com.kakao.sdk:v2-navi:2.5.2" // 카카오내비
    // -------------------------------------------------------
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.google.guava:guava:27.1-android'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    // For how to setup gradle dependencies in Android X, see:
    // https://developer.android.com/training/testing/set-up-project#gradle-dependencies
    // Core library
    androidTestImplementation 'androidx.test:core:1.3.0'
    // -------------------------------------------------------
    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    //리사이클러뷰 인디케이터
    implementation 'me.relex:circleindicator:1.3.2'

    implementation project(path: ':sdk')
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    // -------------------------------------------------------
    //Glide url 이미지 로드하기 위해서 사용!
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'
    //퍼미션 확인(사진 사용 접근 권한 주기)
    implementation 'gun0912.ted:tedpermission:2.2.1'

    //youtube 사용하기
    implementation 'com.pierfrancescosoffritti.androidyoutubeplayer:core:10.0.5'


    //레트로핏 통신을 위해 추가 한 자료
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.4.0'

    //푸시 메세지
    implementation platform('com.google.firebase:firebase-bom:25.12.0')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-messaging:21.0.1'
    implementation 'androidx.work:work-runtime:2.4.0'

    implementation 'com.google.firebase:firebase-auth'
    implementation 'com.google.android.gms:play-services-auth:19.0.0'

    //앱 업데이트 처리
    implementation 'com.google.android.play:core:1.7.2'
    implementation 'com.naver.nid:naveridlogin-android-sdk:4.2.6'

    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'
    implementation 'io.reactivex.rxjava3:rxjava:3.0.0'

    implementation 'com.nineoldandroids:library:2.4.0'

    implementation 'jp.wasabeef:glide-transformations:4.1.0'
    implementation 'jp.co.cyberagent.android:gpuimage:2.0.4'

    implementation 'de.hdodenhof:circleimageview:3.1.0'
}

configurations {
    // Resolves dependency conflict caused by some dependencies use
    // com.google.guava:guava and com.google.guava:listenablefuture together.
    all*.exclude group: 'com.google.guava', module: 'listenablefuture'
}
